

* iPython and Anaconda as Platform for Open Data Science

** Geting started with iPython on MacOS (And EMACS)
:PROPERTIES:
:DATE:     <2017-01-20 Fri 17:53>
:END:

*** What is iPython?

See: https://www.wikiwand.com/en/IPython

#+BEGIN_QUOTE
IPython is a command shell for interactive computing in multiple programming languages, originally developed for the Python programming language, that offers introspection, rich media, shell syntax, tab completion, and history. IPython provides the following features:

- Interactive shells (terminal and Qt-based).
- A browser-based notebook with support for code, text, mathematical expressions, inline plots and other media.
- Support for interactive data visualization and use of GUI toolkits.
- Flexible, embeddable interpreters to load into one's own projects.
- Tools for parallel computing.
#+END_QUOTE

*** Why iPython

1. iPython makes a buffer behave like an SC workspace, i.e. one can run several displayed code fragments separately on demand, edit any of them, and re-run them.  This greatly facilitates programming and testing..
2. iPython also provides easy graphic display capabilities (which are basic for working experimentally with data).
3. For the above reason 2, iPython is the recommended/required platform for working with data from the CERN Open Data repository.

*** How does iPython work? I.e.: What is it made up of, and how do its components work together?

In order to coordinate multiple Python interpreter sessions and send them code (text) for execution, iPython requires a Server.  The server works on HTTP basis. The server receives code text via http and forwards it to python processes for execution.  The server also handles the display of the results from executed code.  The http protocol enables the server to use a usual http-based web-browser (i.e. Chrome, Safari etc.) to display and edit code and to display the results.  The web application that enables the interaction with the server using a browser is called "Jupyter Notebook" (see http://jupyter-notebook.readthedocs.io/en/latest/notebook.html).

Note that the concept of implementing an http server using python resembles the idea of http server programmed in JavaScript that is the basis of =node.js=.  In fact, there are =node.js= implementations of Jupyter (https://github.com/notablemind/jupyter-nodejs, "A node.js kernel for jupyter/ipython").

Jupyter is part of a larger framework for Python applications, which is called /Anaconda/, which is self-defined as "Leading Open Data Science Platform Powered by Python" (https://www.continuum.io/anaconda-overview, https://www.continuum.io/downloads).  For practical purposes, it is recommended to install Anaconda and use the Jupyter platform which is provided there. 

To use iPython, you need to start a Jupyter server and log onto it. It is possible to log into Jupyter from EMACS. However, running a Jupyter server remains a hard prerequisite for working with iPython.

*** How to install iPython for EMACS (on Mac OS X)

**** Prerequisites: Python version + Other packages that need to be installed first

1. On MacOS (10.12 or later) Upgrade Python to v 3.5. Note: This is not strictly required, but 3 is considered the currently live version while v2 is legacy.
   Download 3.5 from: https://www.python.org/downloads/mac-osx/
2. General hard requirement: Install /Anaconda/: https://www.continuum.io/downloads.
3. For working with EMACS only: Install the /Emacs ipython Notebook/ package (/EIN/): https://github.com/tkf/emacs-ipython-notebook

**** Steps

***** Upgrade Python to v 3.6

On MacOS (10.12 or later) Upgrade Python to v 3.5. 
Download 3.5 from: https://www.python.org/downloads/mac-osx/

On 27 Feb 2017 18:04 we used the link with this name: =Latest Python 3 Release - Python 3.6.0=.
This led to this page: https://www.python.org/downloads/release/python-360/
On that link we chose: =Mac OS X 64-bit/32-bit installer=
We downloaded the file: python-3.6.0-macosx10.6.pkg
Then we installed python 3.6 by opening the above pkg file.

***** Install the latest version of /Anaconda/

We used this link https://www.continuum.io/downloads
From there we selected Python 3.6 version, *COMMAND LINE INSTALLER*

We then ran the bash script as indicated in the above page: 

: bash Anaconda3-4.3.0-MacOSX-x86_64.sh 

on iTerm2.

***** Check that python3 is the default python on MacOS shell, and is in Anaconda3: 

Start python on terminal with =python=.
The version message posted by python on terminal should be: 

: Python 3.6.0 |Anaconda 4.3.0 (x86_64)| ...

This is needed to install yt.



***** Install yt

Note: PIP is needed to install yt, but PIP is installed by python 3.6, so it should already be available. 

The pip command for installing yt is: 

: pip install yt

***** Install the /Emacs ipython Notebook/ package (/EIN/):

This enables EMACS to connect to the web-based jupyter notebook for python.  It is thus possible to work with jupyter notebook from emacs (instead of a web browser).

The repository is here: https://github.com/tkf/emacs-ipython-notebook
However, for convenience, we installed the package from EMACS directly, using command: =package-list-packages= and then searching for =ein= and then typing: =i= to mark for install and =x= to execute the installation of marked packages.
***** Start jupyter notebook on terminal.

You will need this to communicate with iPython from EMACS.

On terminal, run: 

: jupyter notebook

This should start the jupyter notebook server and also open a webpage on your default browser (in our case, the default browser is Chrome).
Copy the complete URL of the jupyter notebook and paste it onto an EMACS buffer for later use in the next step:
In our case, the URL was: 

: http://localhost:8888/tree?token=1739de1ff49d08a7fec527058bab89370f8b360b144310e0

***** Connect to jupyter notebook from emacs using EIN

****** Login
Use command (meta-x) =ein:notebooklist-login= to connect to Jupyter.  It will request you to input two items: 
1. the port number to connect to
2. the password for login. 


For 1, use the default port (8888), but check on the browser and on the terminal printout that this is actually the correct one. 
For 2, use the part of the string copied from the url that is after =token=.  For example if the url is like this: 

: http://localhost:8888/tree?token=1739de1ff49d08a7fec527058bab89370f8b360b144310e0

The password will be: 

: 1739de1ff49d08a7fec527058bab89370f8b360b144310e0

You can also find the same string in the output of the terminal where you started jupyter.  For example: 

: [I 18:23:59.961 NotebookApp] The Jupyter Notebook is running at: http://localhost:8888/?token=518b13c30edadcdde9ea1fa6b21a9ff62e64a61c579e7734

****** Open a view to Jupyter notebooks

Using EIN, the EMACS command is: meta-x =ein:notebooklist-open=.

This will open a buffer with a dired-kind-of list showing directories where you can open and edit iPython notebooks.

****** Create your first iPython notebook

In the buffer listing jupyter notebooks which was opened by the previous command, navigate to the location where you want to create your notebook, and use the mouse to create a notebook.  Available mouse commands are listed in the iPython notebook list buffer.

****** Download some data from yt/enzo to test

Browse for example this page for data: http://yt-project.org/data/

For selecting appropriate examples for first steps, see the instructions in the next section.
We selected this data set for our first test:

http://yt-project.org/data/D9p_500.tar.gz

****** Import data and run first visualisation example

See instructions in

http://yt-project.org/doc/quickstart/simple_visualization.html

* Python -> SC for live sonification


